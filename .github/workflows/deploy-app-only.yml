name: Deploy Flarum Application Only

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'ansible/**'
      - '.github/workflows/deploy-app-only.yml'

env:
  ANSIBLE_VERSION: 7.0.0

jobs:
  # ========================================
  # 1. DEPLOY APPLICATION
  # ========================================
  deploy-application:
    name: üöÄ Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python for Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          ansible --version

      - name: üîê Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üîë Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          
          # Add VM to known_hosts with timeout
          timeout 30 ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts || echo "SSH key scan failed, continuing..."

      - name: ‚è≥ Wait for VM to be ready
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          timeout 180 bash -c 'until ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no rocky@$VM_IP "echo VM is ready"; do sleep 15; done'

      - name: üìù Create Ansible inventory
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          
          # Get DB host (same as VM IP for this setup)
          DB_HOST="$VM_IP"
          DB_NAME="flarum"
          DB_USER="flarum"
          
          echo "Using VM IP: $VM_IP, DB Host: $DB_HOST"
          
          cat > inventory.ini << EOF
          [flarum]
          $VM_IP ansible_user=rocky ansible_ssh_private_key_file=~/.ssh/id_rsa

          [flarum:vars]
          db_host=$DB_HOST
          db_name=$DB_NAME
          db_user=$DB_USER
          db_password=${{ secrets.DB_PASSWORD }}
          EOF

      - name: üé≠ Run Ansible Playbook
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          
          # Get DB host (same as VM IP for this setup)
          DB_HOST="$VM_IP"
          DB_NAME="flarum"
          DB_USER="flarum"
          
          echo "Using VM IP: $VM_IP, DB Host: $DB_HOST"
          
          ansible-playbook -i inventory.ini ansible/playbook.yml \
            -e "db_host=$DB_HOST" \
            -e "db_name=$DB_NAME" \
            -e "db_user=$DB_USER" \
            -e "db_password=${{ secrets.DB_PASSWORD }}" \
            --timeout=60 \
            --forks=1

      - name: üì§ Get VM IP for verification
        id: terraform-outputs
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT

  # ========================================
  # 2. VERIFICATION
  # ========================================
  verify-deployment:
    name: ‚úÖ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-application
    timeout-minutes: 5
    
    steps:
      - name: üåê Check Flarum Website
        run: |
          VM_IP="${{ needs.deploy-application.outputs.vm_ip }}"
          echo "Checking Flarum at http://$VM_IP"
          curl -f -s -o /dev/null "http://$VM_IP" && echo "‚úÖ Flarum is accessible" || echo "‚ùå Flarum is not accessible"

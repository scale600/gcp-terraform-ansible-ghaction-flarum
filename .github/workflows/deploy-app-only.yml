name: Deploy Flarum Application Only

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'ansible/**'
      - '.github/workflows/deploy-app-only.yml'

env:
  ANSIBLE_VERSION: 7.0.0

jobs:
  # ========================================
  # 1. DEPLOY APPLICATION
  # ========================================
  deploy-application:
    name: üöÄ Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python for Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          ansible --version

      - name: üîê Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üîë Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          
          # Add VM to known_hosts with timeout
          timeout 30 ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts || echo "SSH key scan failed, continuing..."

      - name: üîç Debug VM Status
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          
          # Check VM status
          echo "Checking VM status..."
          gcloud compute instances describe flarum-vm --format="value(status)" || echo "VM not found"
          
          # Test basic connectivity
          echo "Testing basic connectivity..."
          ping -c 3 $VM_IP || echo "Ping failed"
          
          # Test SSH port
          echo "Testing SSH port..."
          nc -z -v $VM_IP 22 || echo "SSH port not accessible"

      - name: ‚è≥ Wait for VM to be ready
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          
          # Wait for SSH with more detailed logging
          echo "Waiting for SSH to be ready..."
          for i in {1..20}; do
            echo "Attempt $i/20..."
            if ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$VM_IP 'echo VM is ready' 2>/dev/null; then
              echo "SSH connection successful!"
              # Test multiple times to ensure stability
              for j in {1..3}; do
                echo "Stability test $j/3..."
                if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$VM_IP 'echo VM is stable' 2>/dev/null; then
                  echo "Stability test $j failed, retrying..."
                  sleep 5
                  continue 2
                fi
              done
              echo "VM is stable and ready!"
              break
            else
              echo "SSH attempt $i failed, waiting 15 seconds..."
              sleep 15
            fi
          done

      - name: üìù Create Ansible inventory
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          
          # Get DB host (same as VM IP for this setup)
          DB_HOST="$VM_IP"
          DB_NAME="flarum"
          DB_USER="flarum"
          
          echo "Using VM IP: $VM_IP, DB Host: $DB_HOST"
          
          cat > inventory.ini << EOF
          [flarum]
          $VM_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

          [flarum:vars]
          db_host=$DB_HOST
          db_name=$DB_NAME
          db_user=$DB_USER
          db_password=${{ secrets.DB_PASSWORD }}
          EOF

      - name: üîç Pre-Ansible SSH Test
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          
          # Create test playbook to verify connection
          cat > test-connection.yml << 'EOF'
          ---
          - hosts: all
            gather_facts: no
            tasks:
              - name: Test SSH connection
                wait_for_connection:
                  timeout: 60
                  delay: 5
              
              - name: Gather facts after connection
                setup:
          EOF
          
          # Test Ansible connection
          echo "Testing Ansible SSH connection..."
          for i in {1..3}; do
            echo "Ansible connection test attempt $i/3..."
            if ansible-playbook -i inventory.ini test-connection.yml \
              --ssh-common-args="-o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              -v; then
              echo "Ansible connection verified!"
              break
            else
              echo "Ansible connection test $i failed, waiting 20 seconds..."
              sleep 20
            fi
          done

      - name: üé≠ Run Ansible Playbook
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          
          # Get DB host (same as VM IP for this setup)
          DB_HOST="$VM_IP"
          DB_NAME="flarum"
          DB_USER="flarum"
          
          echo "Using VM IP: $VM_IP, DB Host: $DB_HOST"
          
          # Run Ansible with connection retry and increased timeout
          ANSIBLE_SSH_RETRIES=5 ansible-playbook -i inventory.ini ansible/playbook.yml \
            -e "db_host=$DB_HOST" \
            -e "db_name=$DB_NAME" \
            -e "db_user=$DB_USER" \
            -e "db_password=${{ secrets.DB_PASSWORD }}" \
            --timeout=180 \
            --forks=1 \
            --ssh-common-args="-o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            -vv

      - name: üì§ Get VM IP for verification
        id: terraform-outputs
        run: |
          # Get VM IP dynamically
          VM_IP=$(gcloud compute instances list --filter="name:flarum-vm" --format="value(EXTERNAL_IP)" --limit=1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not find VM IP"
            exit 1
          fi
          echo "Using VM IP: $VM_IP"
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT

  # ========================================
  # 2. VERIFICATION
  # ========================================
  verify-deployment:
    name: ‚úÖ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-application
    timeout-minutes: 5
    
    steps:
      - name: üåê Check Flarum Website
        run: |
          VM_IP="${{ needs.deploy-application.outputs.vm_ip }}"
          echo "Checking Flarum at http://$VM_IP"
          curl -f -s -o /dev/null "http://$VM_IP" && echo "‚úÖ Flarum is accessible" || echo "‚ùå Flarum is not accessible"

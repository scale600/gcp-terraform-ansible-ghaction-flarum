name: 🚀 Simple Flarum Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  GCP_PROJECT_ID: riderwin-flarum
  GCP_ZONE: us-central1-a
  VM_NAME: flarum-vm

jobs:
  deploy:
    name: 🎯 Deploy Flarum
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🗑️ Delete existing VM (if exists)
        run: |
          echo "Checking for existing VM..."
          if gcloud compute instances describe $VM_NAME --zone=$GCP_ZONE 2>/dev/null; then
            echo "Deleting existing VM..."
            gcloud compute instances delete $VM_NAME --zone=$GCP_ZONE --quiet
            echo "Waiting for deletion to complete..."
            sleep 30
          else
            echo "No existing VM found"
          fi

      - name: 🖥️ Create Ubuntu VM
        run: |
          echo "Creating new Ubuntu VM..."
          gcloud compute instances create $VM_NAME \
            --project=$GCP_PROJECT_ID \
            --zone=$GCP_ZONE \
            --machine-type=e2-micro \
            --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --tags=http-server,https-server \
            --create-disk=auto-delete=yes,boot=yes,device-name=$VM_NAME,image=projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20241004,mode=rw,size=20,type=pd-standard \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --labels=gce-flarum=true \
            --reservation-affinity=any

      - name: 🔥 Create firewall rules (if not exist)
        run: |
          # HTTP rule
          if ! gcloud compute firewall-rules describe allow-http 2>/dev/null; then
            gcloud compute firewall-rules create allow-http \
              --direction=INGRESS \
              --priority=1000 \
              --network=default \
              --action=ALLOW \
              --rules=tcp:80 \
              --source-ranges=0.0.0.0/0 \
              --target-tags=http-server
          fi
          
          # HTTPS rule
          if ! gcloud compute firewall-rules describe allow-https 2>/dev/null; then
            gcloud compute firewall-rules create allow-https \
              --direction=INGRESS \
              --priority=1000 \
              --network=default \
              --action=ALLOW \
              --rules=tcp:443 \
              --source-ranges=0.0.0.0/0 \
              --target-tags=https-server
          fi

      - name: ⏳ Wait for VM to be ready
        run: |
          echo "Waiting for VM to boot..."
          sleep 60
          
          echo "Checking VM status..."
          for i in {1..10}; do
            STATUS=$(gcloud compute instances describe $VM_NAME --zone=$GCP_ZONE --format="value(status)")
            echo "VM Status: $STATUS (attempt $i/10)"
            if [ "$STATUS" == "RUNNING" ]; then
              echo "✅ VM is running!"
              break
            fi
            sleep 10
          done

      - name: 🚀 Install Flarum
        run: |
          echo "Getting VM IP..."
          VM_IP=$(gcloud compute instances describe $VM_NAME --zone=$GCP_ZONE --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "VM IP: $VM_IP"
          
          echo "Installing Flarum on VM..."
          gcloud compute ssh $VM_NAME --zone=$GCP_ZONE --command="curl -fsSL https://raw.githubusercontent.com/scale600/gcp-terraform-ansible-ghaction-flarum/main/scripts/quick-install.sh | sudo bash" --ssh-flag="-o StrictHostKeyChecking=no"

      - name: 📤 Get Access URL
        id: get-url
        run: |
          VM_IP=$(gcloud compute instances describe $VM_NAME --zone=$GCP_ZONE --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
          echo ""
          echo "=========================================="
          echo "✅ Flarum Deployment Complete!"
          echo "=========================================="
          echo ""
          echo "🌐 Access your forum at:"
          echo "   http://$VM_IP"
          echo ""
          echo "📝 Complete the setup wizard with:"
          echo "   Database Host: localhost"
          echo "   Database Name: flarum"
          echo "   Database User: flarum"
          echo "   Database Password: MySecurePass123!"
          echo ""
          echo "=========================================="

  destroy:
    name: 🗑️ Destroy Flarum
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    
    steps:
      - name: 🔐 Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🗑️ Delete VM
        run: |
          echo "Deleting VM..."
          gcloud compute instances delete $VM_NAME --zone=$GCP_ZONE --quiet || echo "VM not found"
          
          echo "✅ Cleanup complete!"


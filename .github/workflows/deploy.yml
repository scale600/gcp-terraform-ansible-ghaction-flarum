name: Deploy Flarum to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: "1.6.0"
  ANSIBLE_VERSION: "7.0.0"

jobs:
  deploy:
    name: Deploy Flarum Infrastructure and Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Python for Ansible
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          ansible --version

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init
          terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-outputs
        working-directory: ./terraform
        run: |
          echo "vm_ip=$(terraform output -raw vm_ip)" >> $GITHUB_OUTPUT
          echo "db_host=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "db_name=$(terraform output -raw db_name)" >> $GITHUB_OUTPUT
          echo "db_user=$(terraform output -raw db_user)" >> $GITHUB_OUTPUT

      - name: Setup SSH key
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform-outputs.outputs.vm_ip }} >> ~/.ssh/known_hosts

       - name: Wait for VM to be ready
         run: |
           timeout 180 bash -c 'until ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no rocky@${{ steps.terraform-outputs.outputs.vm_ip }} "echo VM is ready"; do sleep 15; done'

      - name: Create Ansible inventory
        run: |
          cat > inventory.ini << EOF
          [flarum]
          ${{ steps.terraform-outputs.outputs.vm_ip }} ansible_user=rocky ansible_ssh_private_key_file=~/.ssh/id_rsa

          [flarum:vars]
          db_host=${{ steps.terraform-outputs.outputs.db_host }}
          db_name=${{ steps.terraform-outputs.outputs.db_name }}
          db_user=${{ steps.terraform-outputs.outputs.db_user }}
          db_password=${{ secrets.DB_PASSWORD }}
          EOF

       - name: Run Ansible Playbook
         run: |
           ansible-playbook -i inventory.ini ansible/playbook.yml \
             -e "db_host=${{ steps.terraform-outputs.outputs.db_host }}" \
             -e "db_name=${{ steps.terraform-outputs.outputs.db_name }}" \
             -e "db_user=${{ steps.terraform-outputs.outputs.db_user }}" \
             -e "db_password=${{ secrets.DB_PASSWORD }}" \
             --timeout=60 \
             --forks=1

      - name: Verify Deployment
        run: |
          echo "Flarum should be available at: http://${{ steps.terraform-outputs.outputs.vm_ip }}"
          curl -f http://${{ steps.terraform-outputs.outputs.vm_ip }} || echo "Deployment verification failed"

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Flarum deployment completed! Access your forum at: http://${{ steps.terraform-outputs.outputs.vm_ip }}'
            })
